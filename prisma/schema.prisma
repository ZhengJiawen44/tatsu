datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}
 
generator client {
  provider = "prisma-client-js"
  previewFeatures = ["fullTextSearchPostgres"]
}
 
model User {
  id            String          @id @default(cuid())
  name          String?
  email         String          @unique
  emailVerified DateTime?
  password      String?
  image         String?
  accounts      Account[]
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  Todos         Todo[]
  Note          Note[]
  File          File[]
  maxStorage    Decimal             @default(1000000.0) //default 100 mb of storage
  usedStoraged  Decimal             @default(0.0)
  protectedSymmetricKey String?    
  enableEncryption      Boolean     @default(true)   
}
 
model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
 
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt
 
  user              User          @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@id([provider, providerAccountId])
}
 
 
model VerificationToken { 
  identifier        String
  token             String
  expires           DateTime
 
  @@id([identifier, token])
}

enum Priority{
  Low
  Medium
  High
}

model Todo{
  id            String          @id @default(cuid())
  title         String
  description   String?
  createdAt     DateTime        @default(now())
  user          User            @relation(fields: [userID], references: [id])
  userID        String
  pinned        Boolean         @default(false)
  completed     Boolean         @default(false)
  order         Int             @default(autoincrement())
  priority      Priority        @default(Low)
  startedAt     DateTime        @default(now())
  expiresAt     DateTime        @default(now())
}

model Note{
  id            String          @id @default(cuid())
  name          String
  content       String?          
  createdAt     DateTime        @default(now())
  user          User            @relation(fields: [userID], references: [id])
  userID        String
}
 
model File{
  id            String          @id @default(cuid())
  name          String
  url           String          
  size          Int        
  createdAt     DateTime        @default(now())
  user          User            @relation(fields: [userID], references: [id])
  userID        String
  s3Key         String
}